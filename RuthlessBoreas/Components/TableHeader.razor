<tr id="table-header">
  <th id="portrait-column"></th>
  <TextHeaderCell Class=@GetColumnClass(1)
                  OnClick=@(new Action(() => SortByName()))
                  Text="Name" />
  <TextHeaderCell Class=@GetColumnClass(2)
                  OnClick=@(new Action(() => OnTableHeaderClickHandler(2, CharacterSortingService.ComparingILvl)))
                  Text="ILvl" />
  <TextHeaderCell Class=@GetColumnClass(3)
                  OnClick=@(new Action(() => OnTableHeaderClickHandler(3, CharacterSortingService.ComparingRaidProgress)))
                  Text="Raid" />
  <ImageHeaderCell Class=@GetColumnClass(4)
                   OnClick=@(new Action(() => OnTableHeaderClickHandler(4, CharacterSortingService.ComparingKeyProgressTank)))
                   Hint="Tank Rio"
                   Source=@ROLE_TANK />
  <ImageHeaderCell Class=@GetColumnClass(5)
                   OnClick=@(new Action(() => OnTableHeaderClickHandler(5, CharacterSortingService.ComparingKeyProgressHeal)))
                   Hint="Heal Rio"
                   Source=@ROLE_HEALER />
  <ImageHeaderCell Class=@GetColumnClass(6)
                   OnClick=@(new Action(() => OnTableHeaderClickHandler(6, CharacterSortingService.ComparingKeyProgressDps)))
                   Hint="Dps Rio"
                   Source=@ROLE_DPS />
  <ImageHeaderCell Class=@GetColumnClass(7)
                   OnClick=@(new Action(() => OnTableHeaderClickHandler(7, CharacterSortingService.ComparingKeyProgressAll)))
                   Hint="Rio"
                   Source=@ROLE_ALL />
  <TextHeaderCell Class=@GetColumnClass(8)
                  OnClick=@(new Action(() => OnTableHeaderClickHandler(8, CharacterSortingService.ComparingMaxWeekKey)))
                  Text="Max Week Key" />
  <TextHeaderCell Class=@GetColumnClass(9)
                  OnClick=@(new Action(() => OnTableHeaderClickHandler(9, CharacterSortingService.ComparingMaxSeasonKey)))
                  Text="Max Season" />
  <th></th>
</tr>

@code {
  private const string SELECTED_COLUMN_CLASS = "table-header-sort-column-selected";
  private const string COLUMN_CLASS = "table-header-sort-column";
  private const string ROLE_TANK = "images/role_tank.webp";
  private const string ROLE_HEALER = "images/role_healer.webp";
  private const string ROLE_DPS = "images/role_dps.webp";
  private const string ROLE_ALL = "images/flag.webp";

  private static int sortColumnNumber;
  private static bool ascSorting = false;

  private static void OnTableHeaderClickHandler(int column, Func<Character, bool, int> sortFunc)
  {
    ToggleSelectedColumn(column);

    StorageService.SortedCharacterIds = StorageService.Characters
      .OrderBy(character => sortFunc(character, ascSorting))
      .Select(character => character.Id);
  }

  private string GetColumnClass(int columnIndex)
  {
    return sortColumnNumber == columnIndex ? SELECTED_COLUMN_CLASS : COLUMN_CLASS;
  }

  private static void SortByName()
  {
    ToggleSelectedColumn(1);

    var characters = StorageService.Characters
      .OrderBy(character => character.Name);
    StorageService.SortedCharacterIds = (ascSorting ? characters : characters.Reverse()).Select(character => character.Id);
  }

  private static void ToggleSelectedColumn(int column)
  {
    if (column == sortColumnNumber)
    {
      ascSorting = !ascSorting;
    }
    else
    {
      sortColumnNumber = column;
      ascSorting = false;

    }
  }
}

<style>
  #table-header {
    height: 50px;
    background-color: rgb(0, 0, 0);
    padding: 0;
    user-select: none;
  }

    #table-header th {
      height: 50px;
      width: 50px;
      padding: 0;
      border: 4px;
      border-style: solid;
      border-bottom-width: thick;
      border-color: rgb(0, 0, 0);
    }

  .table-header-sort-column {
    cursor: pointer;
  }

  .table-header-sort-column-selected {
    cursor: pointer;
    border-bottom-color: rgb(128, 128, 128) !important;
  }

  #table-header img {
    height: 50px;
    width: 50px;
  }

  #portrait-column {
    width: 25px;
  }
</style>
