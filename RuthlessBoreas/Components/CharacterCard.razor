@inject IModalService Modal

@if (this.Char.RaiderIo == null || !this.Char.IsWarcraftLogsDataLoaded)
{
  <div class="character-card">
    <LoadingSpiner />
  </div>
}
else
{
  <div class="character-card">
    <div class="character-card-header" style=@GetHeaderStyle()>@GetHeaderText()</div>
    <div class="character-card-main">
      <CharacterCardSidebar Char=@this.Char />
      <CharacterCardContent Character=@this.Char.WarcraftLogs />
    </div>
  </div>
}
<button class="modal-close-button" onclick=@(new Action(this.CloseModal))>X</button>

@code {
  [CascadingParameter]
  private BlazoredModalInstance BlazoredModal { get; set; }
  [Parameter]
  public Character Char { get; set; }

  private bool IsWarcraftLogsDataLoaded { get; set; }

  protected override async Task OnInitializedAsync()
  {
    if (!this.Char.IsWarcraftLogsDataLoaded)
    {
      await this.Char.LoadWarcraftLogsData();
    }
  }

  private string GetHeaderStyle()
  {
    return $"color: {Utils.GetColorClass(this.Char.RaiderIo.Class)}";
  }

  private string GetHeaderText()
  {
    return $"{this.Char.Name}-{this.Char.Server.Title}";
  }

  private void CloseModal()
  {
    this.BlazoredModal.Close();
  }
}
